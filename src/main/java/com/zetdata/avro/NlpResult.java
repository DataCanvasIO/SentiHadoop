/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.zetdata.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NlpResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NlpResult\",\"namespace\":\"com.zetdata.avro\",\"fields\":[{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"sentiment\",\"type\":\"string\"},{\"name\":\"sentiment_vector\",\"type\":{\"type\":\"array\",\"items\":\"double\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence text;
  @Deprecated public java.lang.CharSequence sentiment;
  @Deprecated public java.util.List<java.lang.Double> sentiment_vector;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public NlpResult() {}

  /**
   * All-args constructor.
   */
  public NlpResult(java.lang.CharSequence text, java.lang.CharSequence sentiment, java.util.List<java.lang.Double> sentiment_vector) {
    this.text = text;
    this.sentiment = sentiment;
    this.sentiment_vector = sentiment_vector;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return text;
    case 1: return sentiment;
    case 2: return sentiment_vector;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: text = (java.lang.CharSequence)value$; break;
    case 1: sentiment = (java.lang.CharSequence)value$; break;
    case 2: sentiment_vector = (java.util.List<java.lang.Double>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'text' field.
   */
  public java.lang.CharSequence getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.CharSequence value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'sentiment' field.
   */
  public java.lang.CharSequence getSentiment() {
    return sentiment;
  }

  /**
   * Sets the value of the 'sentiment' field.
   * @param value the value to set.
   */
  public void setSentiment(java.lang.CharSequence value) {
    this.sentiment = value;
  }

  /**
   * Gets the value of the 'sentiment_vector' field.
   */
  public java.util.List<java.lang.Double> getSentimentVector() {
    return sentiment_vector;
  }

  /**
   * Sets the value of the 'sentiment_vector' field.
   * @param value the value to set.
   */
  public void setSentimentVector(java.util.List<java.lang.Double> value) {
    this.sentiment_vector = value;
  }

  /** Creates a new NlpResult RecordBuilder */
  public static com.zetdata.avro.NlpResult.Builder newBuilder() {
    return new com.zetdata.avro.NlpResult.Builder();
  }
  
  /** Creates a new NlpResult RecordBuilder by copying an existing Builder */
  public static com.zetdata.avro.NlpResult.Builder newBuilder(com.zetdata.avro.NlpResult.Builder other) {
    return new com.zetdata.avro.NlpResult.Builder(other);
  }
  
  /** Creates a new NlpResult RecordBuilder by copying an existing NlpResult instance */
  public static com.zetdata.avro.NlpResult.Builder newBuilder(com.zetdata.avro.NlpResult other) {
    return new com.zetdata.avro.NlpResult.Builder(other);
  }
  
  /**
   * RecordBuilder for NlpResult instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NlpResult>
    implements org.apache.avro.data.RecordBuilder<NlpResult> {

    private java.lang.CharSequence text;
    private java.lang.CharSequence sentiment;
    private java.util.List<java.lang.Double> sentiment_vector;

    /** Creates a new Builder */
    private Builder() {
      super(com.zetdata.avro.NlpResult.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.zetdata.avro.NlpResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.text)) {
        this.text = data().deepCopy(fields()[0].schema(), other.text);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sentiment)) {
        this.sentiment = data().deepCopy(fields()[1].schema(), other.sentiment);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sentiment_vector)) {
        this.sentiment_vector = data().deepCopy(fields()[2].schema(), other.sentiment_vector);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing NlpResult instance */
    private Builder(com.zetdata.avro.NlpResult other) {
            super(com.zetdata.avro.NlpResult.SCHEMA$);
      if (isValidValue(fields()[0], other.text)) {
        this.text = data().deepCopy(fields()[0].schema(), other.text);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sentiment)) {
        this.sentiment = data().deepCopy(fields()[1].schema(), other.sentiment);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sentiment_vector)) {
        this.sentiment_vector = data().deepCopy(fields()[2].schema(), other.sentiment_vector);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'text' field */
    public java.lang.CharSequence getText() {
      return text;
    }
    
    /** Sets the value of the 'text' field */
    public com.zetdata.avro.NlpResult.Builder setText(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.text = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'text' field has been set */
    public boolean hasText() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'text' field */
    public com.zetdata.avro.NlpResult.Builder clearText() {
      text = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'sentiment' field */
    public java.lang.CharSequence getSentiment() {
      return sentiment;
    }
    
    /** Sets the value of the 'sentiment' field */
    public com.zetdata.avro.NlpResult.Builder setSentiment(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sentiment = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'sentiment' field has been set */
    public boolean hasSentiment() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'sentiment' field */
    public com.zetdata.avro.NlpResult.Builder clearSentiment() {
      sentiment = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'sentiment_vector' field */
    public java.util.List<java.lang.Double> getSentimentVector() {
      return sentiment_vector;
    }
    
    /** Sets the value of the 'sentiment_vector' field */
    public com.zetdata.avro.NlpResult.Builder setSentimentVector(java.util.List<java.lang.Double> value) {
      validate(fields()[2], value);
      this.sentiment_vector = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'sentiment_vector' field has been set */
    public boolean hasSentimentVector() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'sentiment_vector' field */
    public com.zetdata.avro.NlpResult.Builder clearSentimentVector() {
      sentiment_vector = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public NlpResult build() {
      try {
        NlpResult record = new NlpResult();
        record.text = fieldSetFlags()[0] ? this.text : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sentiment = fieldSetFlags()[1] ? this.sentiment : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.sentiment_vector = fieldSetFlags()[2] ? this.sentiment_vector : (java.util.List<java.lang.Double>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
